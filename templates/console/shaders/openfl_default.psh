#include "common.fxh"
#include "openfl.fxh"

float4 g_scissorRect     : register (c0);
#define g_scissorMin (g_scissorRect.xy)
#define g_scissorMax (g_scissorRect.zw)

TEXTURE2D g_texture TEXTURE_REG (0);
SAMPLER2D g_sampler SAMPLER_REG (0);

#ifdef USE_COLOR_PALETTE
TEXTURE2D g_texturePalette TEXTURE_REG (1);
SAMPLER2D g_samplerPalette SAMPLER_REG (1);
#endif


struct PS_IN {

	PS_IN_POSITION
	float4 ColorMul : COLOR;
	float4 ColorAdd : COLOR1;
	float2 Texcoord : TEXCOORD;

};


struct PS_OUT {

	float4 Color : COLOR;

};


float4 main (PS_IN In) : PS_TARGET_OUT {

	PS_OUT Out;

	float4 color = TEX2D (g_texture, g_sampler, In.Texcoord);

#ifdef USE_COLOR_PALETTE
	float4 palette = TEX2D (g_texturePalette, g_samplerPalette, float2(color.r, 0.0));
	color = float4(palette.rgb, color.a);
#endif

#ifdef USE_COLOR_TRANSFORM
	Out.Color = colorTransform(
		color,
		In.ColorMul,
		In.ColorAdd
	);

#else
	Out.Color = color * In.ColorMul;
#endif

#ifdef USE_SCISSOR_TEST
	{
		float2 s0 = step(g_scissorMin, In.Position.xy);
		float2 s1 = step(In.Position.xy, g_scissorMax);
		Out.Color.a *= (s0.x*s0.y * s1.x*s1.y);
	}
#endif

	return Out.Color;

}

