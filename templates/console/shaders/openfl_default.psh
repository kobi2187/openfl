#include "common.fxh"
#include "openfl.fxh"

// for now, always use color transform
#define USE_COLOR_TRANSFORM

float4 g_scissorRect     : register (c0);
#define g_scissorMin (g_scissorRect.xy)
#define g_scissorMax (g_scissorRect.zw)

float4 g_colorMultiplier : register (c1);
float4 g_colorOffset     : register (c2);

TEXTURE2D g_texture TEXTURE_REG (0);
SAMPLER2D g_sampler SAMPLER_REG (0);


struct PS_IN {

	PS_IN_POSITION
	float4 Color : COLOR;
	float4 Color2 : COLOR1;
	float2 Texcoord : TEXCOORD;

};


struct PS_OUT {

	float4 Color : COLOR;

};


float4 main (PS_IN In) : PS_TARGET_OUT {

	PS_OUT Out;

#ifdef USE_COLOR_TRANSFORM
	Out.Color = colorTransform(
		TEX2D (g_texture, g_sampler, In.Texcoord),
		In.Color,
		g_colorMultiplier,
		In.Color2 + g_colorOffset
	);
#else
	Out.Color = TEX2D (g_texture, g_sampler, In.Texcoord) * In.Color;
#endif

#ifdef USE_SCISSOR_TEST
	{
		float2 s0 = step(g_scissorMin, In.Position.xy);
		float2 s1 = step(In.Position.xy, g_scissorMax);
		Out.Color.a *= (s0.x*s0.y * s1.x*s1.y);
	}
#endif

	return Out.Color;

}

